;
;;  Literal/ligature/PowerString definitions
;;  for Portable Keyboard Layout by Farkas Máté [https://github.com/Portable-Keyboard-Layout]
;;  edition DreymaR (Øystein B Gadmar, 2015-)   [https://github.com/DreymaR/BigBagKbdTrixPKL]
;;
;;  This file provides named string literals callable by layouts with the &<PS> syntax
;;  It usually goes in the ./Files folder and is used by EPKL.exe
;
;;  - SendInput is not fast for long strings. Meanwhile, any released modifiers get stuck!
;;  - To prevent stuck modifiers, strings can be sent by the Windows SendMessage method.
;;  - For multiline strings, Message performed about twice as fast as Input for me.
;;  - For short strings SendMessage may be slower than SendInput, but it's robust.
;;  - The Paste method pastes the string via the clipboard. May not be reliable in all apps.
;;  - Paste seems best for block sending (n or rn): Fast, if the app gets line breaks right.
;;  - Message sending with +Enter line parsing works in most contexts but it's slower.
;;  
;;  PowerString syntax:
;;  - Any name may be used for &<name>. In layouts, I use short names for aesthetic reasons.
;;  - Multiline strings are used as illustrated below
;;  	- The string entry is set to <PS> = <Multiline> ##, where ## is the number of lines
;;  	- There should also be ## (00-99) numbered lines named <PS>-##
;;  	- End-of-line comments (<whitespace>;<comment>) are not stripped for these lines
;;  - Use optionally quoted strings to preserve white space
;;  - Prefix-entry syntax is allowed for single-line strings - see, e.g., _eD_Extend.ini
;;  - Use [\r \n \t \b \\] escapes for [`r `n `t `b \]
;;  - \n is line break, but some apps require \r\n. Can set the line break mode w/ brkMode.
;;  - There may be a system limit of about 5000 characters per string? I haven't tested.
;

[pkl]
;;  Line break mode: Send as `n, send as `r`n, or split lines and send Shift+Enter between.
brkMode = +Enter		; +Enter, n, rn
;;  String send mode: SendMessage calls, Clipboard Paste or SendInput {Raw}.
strMode = Message		; Message, Paste, Input, Text [AHK v1.1.30+]


[strings]
;;  Some of the below PowerStrings are just showcase examples. They're demonstrated in Extend and DeadKeys mappings.
01      = \nHello, World!\n\t- "Nice to see you!"\n 						; "Hello, World!" using \n and \t escapes
02      = "\nWell, this is silly!\b\b\b\b\b\bsplendid! ;-)\n" 				; Backspace escapes work in some apps only
Sig     = α{Enter}Yours truly,{Enter}    MyName+^{Left} 					; Signature using AHK syntax
CAW     = →Colemak-ⲔⲰ[eD] 													; "Obey the CAW!" the Raven CAW[eD]!
OwO     = Θώθ 																; "Θώθ – What Is Thoth?"
Brc     = α{{}{Enter}{Enter}{}}{Enter}{Up 2}{Tab} 							; Function braces boilerplate for C, AHK etc
C4Loop  = αfor (int i=0; i<; i++) {{}{Enter}{Enter}{}}{Up}    {Left 11} 	; C for loop, robust for auto-indenting editors

Pent    = <Multiline> 17 		; A 17 line string, defined below
;;  The purpose of this Power(!)String is to improve Colemak's daemon summoning capabilities. \m/
;;  See https://forum.colemak.com/topic/2460-improving-colemaks-demon-summoning-abilities/
Pent-01 = "\n             ______             \n"
Pent-02 =   " Col    .d$$$******$$$$c.  mak  \n"
Pent-03 =   " \e/ .d$P"            "$$c \-/  \n"
Pent-04 =   "    $$$$$.     C     .$$$*$.    \n"
Pent-05 =   "  .$$ 4$L*$$.     .$$Pd$  '$b   \n"
Pent-06 =   "  $F   *$. "$$e.e$$" 4$F   ^$b  \n"
Pent-07 =   " d$     $$   z$$$e   $$     '$. \n"
Pent-08 =   " $P  m  `$L$$P` `"$$d$"   k  $$ \n"
Pent-09 =   " $$     e$$F   C   4$$b.     $$ \n"
Pent-10 =   " $b  .$$" $$   o  .$$ "4$b.  $$ \n"
Pent-11 =   " $$e$P"    $b     d$`    "$$c$F \n"
Pent-12 =   " '$P$$$$$$$$$$$$$$$$$$$$$$$$$$  \n"
Pent-13 =   "  "$c.      4$.  $$       .$$   \n"
Pent-14 =   "   ^$$.  DH  $$ d$"  AW  d$P    \n"
Pent-15 =   "     "$$c.   `$b$F    .d$P"     \n"
Pent-16 =   " CAW   `4$$$c.$$$..e$$P"   [eD] \n"
Pent-17 =   "           `^^^^^^^`            \n"

;;  PowerStrings can be used as abbreviations to allow compact layout entries:
Spc     = β{Space} 			; Any 'Spc' or '={Space}' state entries are hardcoded so they can release DeadKeys etc. This one doesn't.
Tab     = β{Tab}
BSp     = β{BackSpace} 		; A β-prefixed mapping is sent "Blind", that is, sensitive to the current modifier state
CBS     = α^{BackSpace} 	; Ctrl+Back deletes the previous word
Cap     = α{CapsLock}
Esc     = α{Esc}
LWi     = α{LWin}

Deb     = α{End}{Enter}{Tab}( 1 ) ? pklDebug( "`n", 1 ) {Space}; eD DEBUG{Left 18} 	; Cheeky ternary op. - 1=true (insert test there) and the : is optional
