;
;;  Compose table definitions
;;  for Portable Keyboard Layout by Farkas Máté [https://github.com/Portable-Keyboard-Layout]
;;  edition DreymaR (Øystein B Gadmar, 2015-)   [https://github.com/DreymaR/BigBagKbdTrixPKL]
;
;;  This is WIP for an EPKL Compose method based on the X11 tables
;;  The Compose table has to be parsed and any non-<Multi_key> entries should be discarded.
;
;;  - EPKL Compose is post-hoc: You press the Compose key after typing the sequence instead of before as in Linux.
;;  - Additive Completion adds to whatever was written. These tables are marked with a + in the 'tables' setting.
;;  - For a normal post-hoc Compose of length #, {Backspace #} is sent first to delete the composing sequence.
;;  - Entry keys may be defined using hex Unicode point sequences, or with simple character strings.
;;      - Simple character string keys cannot contain advanced glyphs that aren't allowed in .ini file keys.
;;      - Simple key entries cannot distinguish case, but the Title Case key is automatically generated as well.
;;      - For full control over case and glyph, use the 0x####_0x####... format with Unicode hex values.
;;  - X11-type composes may be converted to the format seen in the tables quite easily.
;;  - NOTE: You can set the desired compose lengths to look for in an ordered list below, in the 'lengths' setting.
;;      - If lengths are set to 3,2 for instance, 3-key composes will take precedence over 2-key composes.
;;      - If there are composes of the same length in several tables, the last read one will take precedence.
;;  eD WIP:
;;  EPKL should be able to import an X11 Compose table such as /usr/share/X11/locale/en_US.UTF-8/Compose with ~3000 entries.
;

[pkl]
tables  = +dyn, str, x11 				; Which compose tables to use. A "+" prefix means additive composing.
lengths = 3,2,1 	;4, 				; How many previous characters to use as Compose keys, prioritized.


[compose_1_dyn]
e       = ,   	; e, 					; Note that there are many 2-key composes ending w/ "e" too. You can't have both!
n       = k   	; nk/Nk
s       = c   	; sc/Sc
u       = e   	; ue/Ue
q       = ue  	; que/Que
a       = nd  	; and/And
t       = he  	; the/The
i       = on  	; ion/Ion
o       = us  	; ous/Ous

[compose_2_dyn]
;ti      = on  	; tion


[compose_2_str]
me      = <YourNameHere>


[compose_2_x11]
;;  NOTE: Keys are made from Unicode values found in keysymdef, yielding .ini compliant keys.
;;  A few(!) sample entries from XLib /usr/share/X11/locale/en_US.UTF-8/Compose are:
;;  <Multi_key> <grave> <e>          	: "è"   egrave # LATIN SMALL LETTER E WITH GRAVE
;;  <Multi_key> <e> <grave>          	: "è"   egrave # LATIN SMALL LETTER E WITH GRAVE
;;  <Multi_key> <apostrophe> <e>     	: "é"   eacute # LATIN SMALL LETTER E WITH ACUTE
;;  <Multi_key> <e> <apostrophe>     	: "é"   eacute # LATIN SMALL LETTER E WITH ACUTE
;;  <Multi_key> <grave> <o>          	: "ò"   ograve # LATIN SMALL LETTER O WITH GRAVE
;;  <Multi_key> <o> <grave>          	: "ò"   ograve # LATIN SMALL LETTER O WITH GRAVE
;;  <Multi_key> <apostrophe> <o>     	: "ó"   oacute # LATIN SMALL LETTER O WITH ACUTE
;;  <Multi_key> <o> <apostrophe>     	: "ó"   oacute # LATIN SMALL LETTER O WITH ACUTE
;;  <Multi_key> <o> <e>              	: "œ"   oe # LATIN SMALL LIGATURE OE
;;  <Multi_key> <O> <E>              	: "Œ"   OE # LATIN CAPITAL LIGATURE OE
;
;;  A few sample entries from XLib keysymdef.h are:
;;  #define XK_e                             0x0065  /* U+0065 LATIN SMALL LETTER E */
;;  #define XK_grave                         0x0060  /* U+0060 GRAVE ACCENT */
;;  #define XK_apostrophe                    0x0027  /* U+0027 APOSTROPHE */
;;  #define XK_o                             0x006f  /* U+006F LATIN SMALL LETTER O */
;;  #define XK_E                             0x0045  /* U+0045 LATIN CAPITAL LETTER E */
;;  #define XK_O                             0x004f  /* U+004F LATIN CAPITAL LETTER O */

0x0060_0x0065               = è 	; grave  + e      = egrave # LATIN SMALL LETTER E WITH GRAVE
0x0065_0x0060               = è 	; e      + grave  = egrave # LATIN SMALL LETTER E WITH GRAVE
0x0027_0x0065               = é 	; apostr + e      = eacute # LATIN SMALL LETTER E WITH ACUTE
0x0065_0x0027               = é 	; e      + apostr = eacute # LATIN SMALL LETTER E WITH ACUTE
0x0060_0x006f               = ò 	; grave  + o      = ograve # LATIN SMALL LETTER O WITH GRAVE
0x006f_0x0060               = ò 	; o      + grave  = ograve # LATIN SMALL LETTER O WITH GRAVE
0x0027_0x006f               = ó 	; apostr + o      = oacute # LATIN SMALL LETTER O WITH ACUTE
0x006f_0x0027               = ó 	; o      + apostr = oacute # LATIN SMALL LETTER O WITH ACUTE
0x006f_0x0065               = œ 	; o      + e      = oe     # LATIN SMALL LIGATURE OE
0x004f_0x0045               = Œ 	; O      + E      = OE     # LATIN CAPITAL LIGATURE OE
